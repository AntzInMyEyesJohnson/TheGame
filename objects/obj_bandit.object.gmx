<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bandit_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_bandit_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();
shadow = false;
teleport_xpos = 0;
teleport_ypos = 0;
animate_idle = spr_bandit_idle;
animate_move = spr_bandit_move;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(hitby_list,ds_type_list){
    ds_list_destroy(hitby_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player step
//set depth
depth = -(y+2);
//checks for screenfreeze from our weapon's projectiles hitting the enemy
if (ScreenFreezeCheck()){exit;}
//for when the player is using the grapple weapon
if (GrappleCheck()){
    //propels player towards the hook projectile embedded in the wall
    hspd = lengthdir_x(grap_spd,grap_dir);
    vspd = lengthdir_y(grap_spd,grap_dir);
    PlayerCollisionWithWallGrid();
    exit;
}
//check for if being parried
if (parried){
    state = stateLOCKED;
}
//give starting weapon
if (given_starting_weapon == true){
    weapon[selected_weapon_index] = starting_weapon.id;
    weapon_count++;
    starting_weapon.state = 'unholstered';
    given_starting_weapon = false;
}

switch(state){
    case stateFREE:
        GetMovementInput();
        PlayerMovement();
        PlayerSwapSecondary();
        BanditAbility();
        BanditSpecial();
    break;
    case stateACTION2:
        BanditAbility();
        BanditSpecial();
        /*TODO create assassinate effects
        ###############*/
        if (last_assassinate_timer == round(between_assassinate_time*room_speed/2-1)/room_speed){
            //find enemies current facing direction
            var t_dir = point_direction(target_locked.x,target_locked.y,target_locked.x+target_locked.hspd,target_locked.y+target_locked.vspd);
            //get teleport direction and teleport behind enemy
            teleport_xpos = target_locked.x + lengthdir_x(12,t_dir-180);
            teleport_ypos = target_locked.y + lengthdir_y(12,t_dir-180);
            //check that not colliding into a wall
            if (grid_place_meeting(teleport_xpos,teleport_ypos,0)){
                while (grid_place_meeting(teleport_xpos,teleport_ypos,0)){
                    //push teleport location off of wall and towards enemy thats locked current position
                    teleport_xpos += lengthdir_x(1,point_direction(teleport_xpos,teleport_ypos,x,y));
                    teleport_ypos += lengthdir_y(1,point_direction(teleport_xpos,teleport_ypos,x,y));
                }
            }
        }
        //halfway through assassination timer, teleport then assassinate
        if (last_assassinate_timer == round(between_assassinate_time*room_speed/2)/room_speed){
            //actually teleport
            x = teleport_xpos;
            y = teleport_ypos;
            //get direction to assassinate enemy in
            assassinate_direction = point_direction(x,y,target_locked.x,target_locked.y);
            //make knife strikebox
            var projectile = instance_create(x+lengthdir_x(7,assassinate_direction),y+lengthdir_y(7,assassinate_direction),obj_projectile_melee);
            projectile.creator = self.id;
            PlaySound(choose(snd_weapon_knife_assassinate1,snd_weapon_knife_assassinate2),.5,12,random_range(.9,1.1));
                
        }
        //exit state when assassination timer is expired
        if (last_assassinate_timer &gt;= between_assassinate_time){
                state = stateFREE;
        }     
    break;
    case stateACTION1:
        BanditAbility();
        BanditSpecial();
        /*TODO create teleport effects
        ###############*/
        //halfway through teleportation timer, teleport to previously defined location
        if (last_teleport_timer == round(between_teleport_time*room_speed/2)/room_speed){
            x = teleport_xpos;
            y = teleport_ypos;
        }
        //exit state when teleportation timer is expired
        if (last_teleport_timer &gt;= between_teleport_time){
            state = stateFREE;
        }   
    break;
    case stateLOCKED:
        PlayerLockedState();
    break;
    case stateHIT:  
        PlayerHitState();
    break;
    case stateDEATH:
        PlayerDeathState(spr_bandit_death);
    break;
}
//Increment 'last' timers
IncrementTimers();

//facing
if (hspd != 0){
    image_xscale = sign(hspd);
}

image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;



if (PlayerHitByProjectile()){
    if ( state != stateDEATH and state != stateACTION2 ){
        if (ds_list_find_index(hitby_list,incoming_enemy_projectile) == -1){
            ds_list_add(hitby_list,incoming_enemy_projectile);
            hitby_list_timer = room_speed*10;
            //knockback
            hspd += incoming_enemy_projectile.hspd;
            vspd += incoming_enemy_projectile.vspd;
            
            //play player hit sound
            PlaySound(snd_hit3,1,15,random_range(1,1.1));
            
            player_health -= incoming_enemy_projectile.damage;
            if (player_health &lt;= 0){
                state = stateDEATH;
            } else {
                hit_timer = 0;
                state = stateHIT;
            }
        }
    }
}

PlayerCollisionWithWallGrid();

HitbyListManagement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(hitby_list,ds_type_list){
    ds_list_destroy(hitby_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow and self
//draw shadow
draw_sprite_ext(spr_player_shadow,0,x,y,scale_factor,scale_factor,0,c_white,.4);

if (state == 'teleport'){ 
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(12,120,0,scale_factor,round(between_teleport_time*room_speed));
    }
} else if (state == 'assassinate'){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(32,3,0,scale_factor,round(between_assassinate_time*room_speed));
    }
} 

//draw self
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
