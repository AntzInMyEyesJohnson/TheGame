<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init debris 
/*
image_speed = 0;
scale_factor = 1;
*/
///Properties
image_speed = 0;
scale_factor = 0;
timer=0;
z=0;
start_x=x;
start_y=y;
target_x=noone;
target_y=noone;
length=room_speed/2;
bdir = 0;
bdist = 0;

shadow_alpha=0;
shadow_alpha_min=.25;
shadow_alpha_max=.5;
shadow_scale=1;
shadow_scale_min=.5;
shadow_scale_max=1;
shadow_sprite = spr_bulletshell_shadow;

number_of_bounces=choose(1,2,3);
bouncing = false;
rotate = true;
height=48;
spray_blood = false;
blood_alarm = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw to surface
surface_set_target(obj_surface.dead_sf);
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*scale_factor,image_yscale*scale_factor,image_angle,c_white,image_alpha)
surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bounces then slowly destroys itself
depth=-y;
if (bouncing == true and image_index == 0){
    if(timer&lt;length)
      timer++;
    else
    {
      timer=length;
      if(number_of_bounces&gt;0)
      {
        number_of_bounces--;
        bdir=point_direction(start_x,start_y,target_x,target_y);
        bdist=point_distance(start_x,start_y,target_x,target_y)/2;
        target_x=x+lengthdir_x(bdist,bdir);
        target_y=y+lengthdir_y(bdist,bdir);
        start_x=x;
        start_y=y;
        length*=.75;
        height/=2;
        timer=0;
      }
    }
    lx = lerp(start_x,target_x,timer/length);
    ly = lerp(start_y,target_y,timer/length);
    if (grid_place_meeting(lx,y,0)){
        var sx = sign(lx-x);
        while(!grid_place_meeting(x+sx,y,0)){
            x += sx;
        }
        start_x = x;
        target_x = x-lengthdir_x(bdist,bdir);
    } else {
        x = lx;
    }
        
    if (grid_place_meeting(x,ly,0)){
        var sy = sign(ly-y);
        while(!grid_place_meeting(x,y+sy,0)){
            y += sy;
        }
        start_y = y;
        target_y = y-lengthdir_y(bdist,bdir);
    } else {
        y = ly;
    }
    
    z=Arc(0,height,0,timer/length,.8);
    
    shadow_alpha=lerp(shadow_alpha_max,shadow_alpha_min,z/32);
    shadow_scale=lerp(shadow_scale_max,shadow_scale_min,z/32);

    /*
    shadow_alpha=0;
    shadow_alpha_min=.25;
    shadow_alpha_max=.5;
    shadow_scale=1;
    shadow_scale_min=.5;
    shadow_scale_max=1;
    */
} else {
    hspeed *= .8;
    vspeed *= .8;
}

if (speed &lt; .1) {
    image_alpha -= .001;
} 

if (image_alpha &lt;= .9){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*///draw debris and shadow
if (sprite_index == spr_rock_splatter){//draw self with shadow for rock splatter
    draw_self();
    draw_sprite_ext(sprite_index,image_index,x,y+sprite_height/2,
                    image_xscale,-image_yscale,image_angle,c_black,.5);
} else{//draw self with no shadow for blood splatter
    draw_self();
}
*/
//draw shadow
draw_sprite_ext(shadow_sprite,0,x,y,shadow_scale*scale_factor,shadow_scale*scale_factor,0,c_white,image_alpha/4);
//rotate
if (image_alpha &gt; .92 and rotate){
    image_angle += 10;
} 

//spray blood if its a piece of a dead enemy
if (spray_blood == true){
    CreateParticle(global.pt_blood,image_angle-90,4,0);
}

//draw self
draw_sprite_ext(sprite_index,image_index,x,y-z,image_xscale*scale_factor,image_yscale*scale_factor,image_angle,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
