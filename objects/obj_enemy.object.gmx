<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player))
    target = obj_player;
else
    target = noone;

alarm[0] = 10;

// movement
movespeed = 6;
xspeed = 0;
yspeed = 0;

// ai variables
force_adjust = true; // move around even when at target's location
force_avoid = true; // avoid similar instances?
follow_range = 128; // how close we want to get to the target
follow_timer = 20; // time to continue to persue target even after losing line of sight
wander = true; // can we wander
wander_timer = 0;
range = 48; // random_range(-range,range);
mode = "wander"; // state

// movement variables
dir = 0;
xto = x;
yto = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mode = "wander";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (wander)
    {
    xto = x + irandom_range(-range,range);
    yto = y + irandom_range(-range,range);
    dir = point_direction(x,y,xto,yto);
    
    wander_timer = 20+irandom(60);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 6+irandom(4);

// check for the player
if (instance_exists(obj_player))
    target = obj_player;
else
    target = noone;

// stop if theres no player
if (target == noone)
    exit;

// if we can't see the player
if (collision_line(x,y,target.x,target.y,obj_wall,false,true))
    {
    // if we're already wandering, exit
    if (mode == "wander")
        exit;
    else
        {
        // if we havent already, start counting down to wandering
        if (alarm[2] == -1)
            alarm[2] = follow_timer;
        }
    }

xspeed *= 0.6;
yspeed *= 0.6;

// persue the player
xto = target.x + irandom_range(-range,range);
yto = target.y + irandom_range(-range,range);
dir = point_direction(x,y,xto,yto);

if (point_distance(x,y,target.x,target.y) &lt;= follow_range)
    {
    if (force_adjust) and (random(1) &lt; 0.2)
        mode = "follow";
    else
        mode = "wait";
    }
else
    {
    mode = "follow";
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(mode)
    {
    case "follow": // far away from target
        xspeed += lengthdir_x(1,dir);
        yspeed += lengthdir_y(1,dir);
        
        xspeed = clamp(xspeed,-movespeed,movespeed);
        yspeed = clamp(yspeed,-movespeed,movespeed);
        
        movespeed += (6 - movespeed)*0.1;
        break;
    
    case "wait": // close to target
        xspeed *= 0.8;
        yspeed *= 0.8;
        break;
    
    case "wander": // move randomly
        if (alarm[1] == -1)
            alarm[1] = 60+irandom(240);
        
        if (wander_timer &gt; 0)
            {
            wander_timer--;
            
            if (place_meeting(x+xspeed,y,obj_wall))
                dir += 180+irandom_range(-15,15);
            else if (place_meeting(x,y+yspeed,obj_wall))
                dir += 180+irandom_range(-15,15);
            
            xspeed += lengthdir_x(1,dir);
            yspeed += lengthdir_y(1,dir);
            
            xspeed = clamp(xspeed,-movespeed,movespeed);
            yspeed = clamp(yspeed,-movespeed,movespeed);
            }
        
        movespeed += (2 - movespeed)*0.1;
        break;
    }

// collision response
if (place_meeting(x+xspeed,y,obj_wall))
    {
    var sx = sign(xspeed);
    while(!place_meeting(x+sx,y,obj_wall))
        x += sx;
    xspeed = 0;
    }
else
    x += xspeed;

if (place_meeting(x,y+yspeed,obj_wall))
    {
    var sy = sign(yspeed);
    while(!place_meeting(x,y+sy,obj_wall))
        y += sy;
    yspeed = 0;
    }
else
    y += yspeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (force_avoid)
    {
    // avoid touching other allies
    var angle = point_direction(other.x,other.y,x,y);
    xspeed += lengthdir_x(1,angle);
    yspeed += lengthdir_y(1,angle);
    
    xspeed = clamp(xspeed,-movespeed,movespeed);
    yspeed = clamp(yspeed,-movespeed,movespeed);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>



