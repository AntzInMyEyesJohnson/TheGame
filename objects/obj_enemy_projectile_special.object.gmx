<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy_projectile_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeProjectile();
bounce_max = 1;
rotate = false;
//for screen freezes
InitializeScreenFreezeVariables();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move projectile
//set depth
depth = -y;

//screen freeze for when player projectile hits an enemy
if (ScreenFreezeCheck()){exit;}

if (instance_exists(creator)){
    if (spd == 0){
        decel = 1;
        if (creator.object_index == obj_archer){
            damage = 1;
            spd = 2.5;
            //knockback = 4;
            //accuracy = creator.attack_dir;
            se_duration = 10;
            rotate = false;
            image_index = 5;
            image_speed = 0;
        }
        hspd = lengthdir_x(spd,accuracy);
        vspd = lengthdir_y(spd,accuracy);
    }
} else {
    instance_destroy();
}

player = instance_exists(obj_player);
time_exception = false;
if ((time_slow == true or time_stop == true) and player == true){
    if (point_distance(x,y,obj_player.x,obj_player.y) &lt;= 20){
        time_exception = true;
    } 
}
hitting_player = instance_place(x,y,obj_player);

if (hitting_player != noone) {
    //TODO Play Sound
    //hspd -= hspd/2;
    //vspd -= vspd/2;
    //instance_destroy();
}

//facing 
if (rotate == true){
    //like how ninja's projectile spins
    image_angle += 15;
}else {
    image_angle = accuracy;
}

if (bounce &gt;= bounce_max){
    instance_destroy();
}

if (abs(hspd) &lt;= 1 and abs(vspd) &lt;= 1) {
    instance_destroy();
}

ProjectileBounceCollisionWithWallGrid();

if (effect_hit_wall){
    EffectWallHit(0);
    bounce++;
    effect_hit_wall = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy when outside room
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
