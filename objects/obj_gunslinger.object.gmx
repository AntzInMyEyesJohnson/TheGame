<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gunslinger_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_gunslinger_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();
lockedon = false;
deadeye = false;
AnimateMoveSprites(spr_gunslinger_move,spr_gunslinger_move,spr_gunslinger_moveu);
//AnimateActionMoveSprites(spr_gunslinger_move,spr_gunslinger_move,spr_gunslinger_moveu);
animate_idle = spr_gunslinger_idle;
animate_action1 = spr_gunslinger_move;//spr_gunslinger_roll
AnimateAttackSprites(spr_gunslinger_shoot,spr_gunslinger_shoot2);
scale_factor = .75;
lockedon_off_delay = -1; //for mouse and shot delay


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player step
//set depth
depth = -(y+4);

//when hitting enemy the screen will freeze
if (ScreenFreezeCheck()){exit;}

//samurai state checks
GunslingerChecks(state);
/*
Unique -&gt; can go into cover
Special -&gt; deadeye time_stop
Action2 -&gt; if enemy close stab execute and use as shield and lock on else lock on and strafe
Action1 -&gt; stab execute
Attack2 -&gt; revolvers with instant shot
Attack1 -&gt; revolvers
*/
/* State Machine */
switch(state){
    case stateFREE:
        PlayerMovement();
        PlayerSwapSecondary();
    break;
    case stateACTION1:
        //animation
        sprite_index = animate_action1;
        image_index = round(action_dir/45);
        var dash_length = 9;
        var spd = 8;
        if (action1_timer &lt;= round(dash_length*2)){
            if(action1_timer &gt; dash_length){
                hspd *= .8;
                vspd *= .8;
            } else{
                hspd = Tween(EASEINOUTCIRC,0,lengthdir_x(spd,action_dir),action1_timer,dash_length);
                vspd = Tween(EASEINOUTCIRC,0,lengthdir_y(spd,action_dir),action1_timer,dash_length);
            }
        } else{
            hspd = 0;
            vspd = 0;
            state = stateFREE;
        }
        /*
        CombatMovement(combat_target);
        //obj_mouse.x = combat_target.x;
        //obj_mouse.y = combat_target.y;
        if (CombatExit()){
            state = stateFREE;
        }*/
    break;
    case stateACTION2:
        state = stateFREE;
    break;
    case stateATTACK:
        hspd *= .9;
        vspd *= .9;
        sprite_index = animate_attack[ani_atkcombo];
        img_xsc = XscaleFlip(attack_dir);
        img_spd = 0;
        image_index = AnimateToAlarm(attack_length,attack_alarm);//Tween(EASEINCUBIC,0,attack_length/(image_number-1),attack_alarm,attack_length);
        if(round(attack_alarm) == 0){
            state = stateFREE;
        }
    break;
    case stateHIT:
        PlayerHitState()
    break;
    case stateSPECIAL:
        ThousandSwords();
    break;
    case stateUNIQUE:
        //sprite_index = animate_action1;
        image_index = round(ff_dir/45);
        img_spd = 0;
        FreeflowState();
    break;
    case stateLOCKED:
        PlayerLockedState();
    break;
    case stateDEATH:
        PlayerDeathState(spr_gunslinger_death);
        //room_restart();
    break;
}
//Increment 'last' timers
IncrementTimers();

//facing
if (state == stateATTACK){
    image_xscale = img_xsc;
} else {
    if (hspd != 0){
        image_xscale = sign(hspd);
    }
}

if (sprite_index == spr_gunslinger_move){scale_factor = .4;}
else{scale_factor = .75;}

//Scale change
image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;

PlayerCollisionWithWallGrid();
FreeflowListManagement();
HitbyListManagement();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow and self
//draw shadow
draw_sprite_ext(spr_player_shadow,0,x,y,scale_factor,scale_factor,0,c_white,.4);

//draw self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
