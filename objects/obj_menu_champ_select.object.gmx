<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_champ_select</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init champ select
// number of items in selection list
length = sprite_get_number(spr_champ_select);

select = floor(length/2);
select_old = select;
select_pos = select;
select_drw = select;
select_spd = 0;
wrapped = false;

// spacing between items
spacing = 96;

// scaling and x position for each item, easily change it from x position to y position
for(var i=0; i&lt;length; i++;)
    {
    x_pos[i] = 0;
    scale[i] = 1;
    }

// effects behind selected item
grow = 0;
rot1 = irandom(360);
rot2 = irandom(360);
show = 0;

// roulette stuff
randomizing = false;
done_random = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(randomizing)
    {
    // select
    if (keyboard_check_pressed(ord("A"))) or (keyboard_check_pressed(vk_left))
        select_pos--;
    if (keyboard_check_pressed(ord("D"))) or (keyboard_check_pressed(vk_right))
        select_pos++;
    select_pos = clamp(select_pos,0,length-1);
    
    // start randomizing
    if (keyboard_check_pressed(vk_space))
        {
        randomizing = true;
        done_random = false;
        
        // start the selection "spinning" with a random speed
        select_spd += (0.5+random(0.25)) * choose(-1,1);
        }
    
    //actually select a champ
    if (keyboard_check_pressed(vk_enter))
        {
        switch (select)
            {
            case 0:
                global.champion_selected = obj_wizard;
            break;
            case 1:
                global.champion_selected = obj_gunslinger;
            break;
            case 2:
                global.champion_selected = obj_bandit;
            break;
            case 3:
                global.champion_selected = obj_viking;
            break;
            case 4:
                global.champion_selected = obj_samurai;
            break;            
            }
            room_goto(rm_level_generator);
            instance_destroy();
        }
    // white sparkles in background disappear
    show *= 0.8;
    }
else
    {
    // we are spinning fast still
    if (select_spd &gt; 1)
        select_spd *= 0.975;
    else
        {
        // spin is slowed down
        select_spd *= 0.99;
        
        // done spinning
        if (abs(select_spd) &lt; 0.01)
            {
            // show white sparkles behind selection
            show += (1 - show)*0.2;
            
            // create confetti as soon as we stop
            if !(done_random)
                {
                done_random = true;
                select_spd = 0;
                switch (select)
                    {
                    case 0:
                        global.champion_selected = obj_wizard;
                    break;
                    case 1:
                        global.champion_selected = obj_gunslinger;
                    break;
                    case 2:
                        global.champion_selected = obj_bandit;
                    break;
                    case 3:
                        global.champion_selected = obj_viking;
                    break;
                    case 4:
                        global.champion_selected = obj_samurai;
                    break;            
                    }
                room_goto(rm_level_generator);
                instance_destroy();
                /*
                repeat(128)
                    instance_create(x_pos[select],view_hview[0]/2,obj_confetti);
                
                audio_play_sound(snd_hooray,0,0);
                */
                }
            else
                {
                // wait for user to start acknowledge selection
                if (keyboard_check_pressed(vk_space))
                    {
                    randomizing = false;
                    select_pos = select;
                    }
                }
            }
        }
    
    select_pos += select_spd;
    if (select_pos &lt; -0.5)
        {
        select_pos = length-0.5;
        wrapped = true;
        }
    else if (select_pos &gt; length-0.5)
        {
        select_pos = -0.5;
        wrapped = true;
        }
    }

// if we are randomizing, don't follow the selected item so the "view" doesn't jerk around
if (randomizing)
    select_drw += (((length-1)/2) - select_drw)*0.1;
else
    select_drw += (select_pos - select_drw)*0.1;

// select the item closest to our select position
select_old = select;
select = round(select_pos);

if (select_old != select)
    {
    if (wrapped)
        wrapped = false;
    else
        {
        select_old = select;
        PlaySound(snd_select,2,10,random_range(1,1.2));
        }
    }


// sin value stuff
grow += 0.1;
if (grow &gt; 2*pi)
    grow = 0;

rot1 += 1;
rot2 -= 1.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(fnt_debug);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(12,12,"GM Tutorials Live - Week 19: Randomized List Selection / Character Select#fps: "+string(fps_real)+"#[A] and [D] or [LEFT] and [RIGHT] to make selection#[SPACE] to spin to random item!");

switch (select)
    {
    case 0:
        champion_name = "Wizard";
    break;
    case 1:
        champion_name = "Gunslinger";
    break;
    case 2:
        champion_name = "Bandit";
    break;
    case 3:
        champion_name = "Viking";
    break;
    case 4:
        champion_name = "Samurai";
    break;            
    }

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_menu);
draw_text(display_get_width()/2-140,display_get_height()/2-170,champion_name);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw all of the items in the list
for(var i=0; i&lt;length; i++;)
    {
    if (i == select)
        {
        // draw bigger and with a grow/shrink animation if this iteration is the selected one
        var this_scale = (2 + sin(grow)*0.2);
        }
    else
        {
        // draw with normal scale
        var this_scale = 1;
        }
    
    x_pos[i] = (view_wview[0]/2) + ((i*spacing)) - (select_drw*spacing);
    scale[i] += (this_scale - scale[i])*0.6;
    
    if (show &gt; 0) and (select == i)
        {
        draw_sprite_ext(spr_selected,0,x_pos[i],view_hview[0]/2,show + sin(grow)*0.1,show + sin(grow)*0.1,rot1,c_white,1);
        draw_sprite_ext(spr_selected,0,x_pos[i],view_hview[0]/2,show + sin(grow)*0.1,show + sin(grow)*0.15,rot2,c_white,1); 
        }
    draw_sprite_ext(spr_champ_select,i,x_pos[i],view_hview[0]/2,scale[i],scale[i],0,c_white,1);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
