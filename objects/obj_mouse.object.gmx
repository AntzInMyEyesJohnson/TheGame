<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mouse_target_reticule</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set mouse depth
depth = -10001;
image_speed = 0;
pulse = 0;
line_draw = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse cursor
if (room == rm_level_generator or room == rm_testing){
    //create specfic mouses if needed
    if (instance_exists(obj_gunslinger)){
        image_index = 0;
        image_alpha = 1;
        can_hit = instance_place(x,y,obj_enemy_parent);
        if (can_hit != noone){
            image_blend = c_red;
            image_angle += 10;
        } else {
            image_blend = c_white;
            image_angle = 0;
        }
        x = mouse_x;
        y = mouse_y;        
        /*
        if (obj_player.combat_target != -1 and (obj_gunslinger.state == stateACTION1 or obj_gunslinger.state == stateACTION2)){
            image_blend = c_red;
            image_angle += 4;
            x = obj_player.combat_target.x;
            y = obj_player.combat_target.y;
        } else {
            image_blend = c_white;
            image_angle = 0;
            x = mouse_x;
            y = mouse_y;
        }
        */
    }else if (instance_exists(obj_samurai)){ 
        GetMainInput();
        image_index = 2;
        image_angle = point_direction(obj_samurai.x,obj_samurai.y,x,y)-90;
            //thousands swords state has no restriction on distance of enemies
            if (obj_samurai.state == stateSPECIAL){
                if (!main_keyp){
                    //make the mouse cursor pulse a little
                    pulse = (pulse + 6) mod 360;
                    scale = lengthdir_x(.25, pulse) + 1;
                    image_xscale = scale;
                    image_yscale = scale;
                    //increase alpha
                    image_alpha = 1;
                    x = mouse_x;
                    y = mouse_y;
                    if (ObjectInPath(obj_samurai.x,obj_samurai.y,x,y,10,obj_enemy_parent)){ 
                        image_blend = c_red;
                    } else {
                        image_blend = c_aqua;
                    }
                } 
            } else {//not in thousand swords state
                //normal mouse interaction
                if (ObjectInPath(obj_samurai.x,obj_samurai.y,x,y,10,obj_enemy_parent) and point_distance(obj_samurai.x,obj_samurai.y,x,y) &lt; 150){
                    //set trajectory line toggle to true
                    line_draw = true;   
                    //make the mouse cursor pulse a little
                    pulse = (pulse + 6) mod 360;
                    scale = lengthdir_x(.25, pulse) + 1;
                    image_xscale = scale;
                    image_yscale = scale;
                    //increase alpha
                    image_alpha = 1;
                    image_blend = c_red;
                    x = mouse_x;
                    y = mouse_y;
                } else {
                    image_xscale = 1;
                    image_yscale = 1;
                    image_alpha = 1;
                    image_blend = c_white;
                    x = mouse_x;
                    y = mouse_y;
                }
            }
    } else if (instance_exists(obj_viking)){
        image_index = 2;
        image_angle = point_direction(obj_viking.x,obj_viking.y,x,y)-90;
        x = mouse_x;
        y = mouse_y;
        if (instance_exists(obj_enemy_parent)){
            //when mouse is hovering over an enemy
            mouse_locked_on = instance_place(x,y,obj_enemy_parent);
            if (instance_exists(mouse_locked_on))
            {   
                image_alpha = 1;
                image_blend = c_red;
            } else{
                image_alpha = 1;
                image_blend = c_white;
            }
        } else{//if all enemies are dead
            image_alpha = 1;
            image_blend = c_white;
        } 
    } else {
        image_alpha = 1;
        image_blend = c_white;
        image_angle = 0;
        x = mouse_x;
        y = mouse_y;
    }
} else {//not in room generator ie upgrade room or champ select room
    image_index = 1;
    image_alpha = 1;
    image_blend = c_white;
    image_angle = 0;
    x = mouse_x;
    y = mouse_y;
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
