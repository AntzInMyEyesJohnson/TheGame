<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_revolver_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_ranged_type</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init bullet
InitializeProjectile();
//set max bounces
bounce_max = 2;
//for screen freezes
InitializeScreenFreezeVariables();
/*###############DAMAGE UPGRADE*/
damage = 0;
for(var i = 0;i &lt; ds_list_size(attached_upgrades);i++){
    if (attached_upgrades[| i] == DAMAGE_UP){
        damage = 1;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_list_find_index(ds_trails,self.id) != -1){
    ds_list_delete(ds_trails,ds_list_find_index(ds_trails,self.id));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move projectile
//set depth
depth = -y;

//screen freeze for when I hit enemy
if (ScreenFreezeCheck()){exit;}

//check for creator in case player or weapon is destroyed while still in the air
if (instance_exists(creator)){
    if (spd == 0){
        if (creator.object_index == obj_gunslinger){
            damage += 1;
            spd = 8;
            knockback = 4;
            if (accuracy == 0){
                accuracy = random_range(creator.attack_dir-2,creator.attack_dir+2);
                //direction = accuracy;
            }
            sprite_index = spr_revolver_bullet;
            //image_index = 1;
            decel = .999;
        }
        if (creator.object_index == obj_weapon_revolver){
            damage += 1;
            spd = 7;
            knockback = 4;
            if (accuracy == 0){
                accuracy = random_range(creator.attack_dir-2,creator.attack_dir+2);
                //if gunslinger is lockedon then more accurate
                if (creator.owner.lockedon){
                    accuracy = random_range(creator.attack_dir-.5,creator.attack_dir+.5);
                }
            }
            sprite_index = spr_revolver_bullet;
            //image_index = 1;
            decel = .999;
        }
        if (creator.object_index == obj_weapon_rifle){
            damage += 2;
            spd = 9;
            knockback = 6;
            if (accuracy == 0){
                accuracy = random_range(creator.image_angle-1,creator.image_angle+1);
                //direction = accuracy;
            }
            sprite_index = spr_rifle_bullet;
            //image_index = 1;
            decel = .999;
        }
        if (creator.object_index == obj_weapon_bow){
            damage += 3;
            spd = 8;
            knockback = 8;
            if (accuracy == 0){
                accuracy = random_range(creator.image_angle-2,creator.image_angle+2);
                //direction = accuracy;
            }
            bounce = bounce_max-1;
            sprite_index = spr_bow_arrow;
            //image_index = 0;
            decel = 1;
        }
        if (creator.object_index == obj_weapon_staff){
            damage += 3;
            spd = 6;
            knockback = 8;
            if (accuracy == 0){
                accuracy = random_range(creator.image_angle-3,creator.image_angle+3);
                //direction = accuracy;
            }
            bounce = bounce_max-1;
            //TODO make fireball sprite
            sprite_index = spr_sniper_bullet;
            //image_index = 0;
            decel = 1;
        }
        hspd = lengthdir_x(spd,accuracy);
        vspd = lengthdir_y(spd,accuracy);
    }
    //create particle effects
    if (creator.object_index == obj_weapon_staff){
        scr_part_fire_init_dir(accuracy-180);
        part_particles_create(global.ps,x,y,global.pt_fire,20);
    }
    
    if (time_stop){
        //particle trail variable set to true
        projectile_trail = true;
        scr_part_warpring_init_dir(accuracy-180);
        part_particles_create(global.ps,x,y,global.pt_warpring,1);
    } else {
        if (projectile_trail){
            if (sonicboom){
                var sonicboom_effect = instance_create(x,y,obj_effect_bullethit);
                sonicboom_effect.creator = self.id;
                sonicboom_effect.image_angle = accuracy;
                sonicboom_effect.image_speed = .35;
                sonicboom_effect.image_xscale = .75;
                sonicboom_effect.image_yscale = .75;
                sonicboom_effect.depth = -(y+1);
                sonicboom_effect.image_blend = make_colour_hsv(40,190,200);
                sonicboom = false;
            }
            scr_part_warpline_init_dir(accuracy-180);
            part_particles_create(global.ps,x+lengthdir_x(25,accuracy-180),y+lengthdir_y(25,accuracy-180),global.pt_warpline,1);
        }
    }
    
} else {
    //if creator dies
    instance_destroy();
}

hitting_enemy = instance_place(x,y,obj_enemy_parent);

if (hitting_enemy != noone) {
    if (hitting_enemy.comscript != ceDeath and hitting_enemy.comscript != ceDestroy){
        decel -= (1-decel/3);
        decel -= (1-decel/3);
    }
}

//facing 
if (rotate == true){
    //like how ninja's projectile spins
    image_angle += 15;
}else {
    image_angle = accuracy;
}

if (movement_has_started and (abs(hspd) &lt;= 1 and abs(vspd) &lt;= 1)){
    instance_destroy();
}

ProjectileBounceCollisionWithWallGrid();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy when outside room
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bullet draw
//draw_sprite(sprite_index,image_index,x,y);
if (instance_exists(creator)){
    if (time_stop == true){
        var atemp_dir = accuracy;
        var atemp_x = x + lengthdir_x(distance_to_object(creator),atemp_dir-180);
        var atemp_y = y + lengthdir_y(distance_to_object(creator),atemp_dir-180);
        var astart_x = atemp_x;
        var astart_y = atemp_y;
        var line_collision = (grid_place_meeting(atemp_x,atemp_y,-1));
        while (!line_collision and point_distance(astart_x,astart_y,atemp_x,atemp_y) &lt; room_width){
            atemp_x += lengthdir_x(4,atemp_dir);
            atemp_y += lengthdir_y(4,atemp_dir);
            line_collision = (grid_place_meeting(atemp_x,atemp_y,-1));
        }
        draw_set_blend_mode(bm_add);
        var line_alpha = min(sin(degtorad((current_time)))+1,.6);
        draw_set_alpha(line_alpha);
        draw_line_width_colour(astart_x,astart_y,atemp_x,atemp_y,1,c_maroon,c_red);
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
    }    
}

//make a motion trail behind bullet
if (ds_list_find_index(ds_trails,self.id) == -1){
    ds_list_add(ds_trails,self.id);
    create_motion_trail(3,40,accuracy,1,300);
}
//draw self last so it is in front of line
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,accuracy,c_white,1); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
