<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sniper_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_ranged_type</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///int instant bullets
InitializeProjectile();
bounce_max = 2;
line_start_x = 0;
line_start_y = 0;
instant = true;
//for screen freezes
InitializeScreenFreezeVariables();
/*###############DAMAGE UPGRADE*/
damage = 0;
for(var i = 0;i &lt; ds_list_size(attached_upgrades);i++){
    if (attached_upgrades[| i] == DAMAGE_UP){
        damage = 1;
        break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade away then destroy projectile
//set depth
depth = -y;

//screenfreeze when I hit enemy
if (ScreenFreezeCheck()){exit;}

//time manipulation check
//if (TimeStopCheck()){exit;}

if (creator.object_index == obj_weapon_sniper){
    sprite_index = spr_sniper_bullet;
    image_index = 1;
    knockback = 10;
    spd = 4;
    if (accuracy == 0){
        accuracy = creator.attack_dir;
        damage += 4;
    }
    hspd = lengthdir_x(knockback,accuracy);
    vspd = lengthdir_y(knockback,accuracy);
    decel = 1;
} else if (creator.object_index == obj_weapon_revolver){
    sprite_index = spr_sniper_bullet;
    image_index = 1;
    knockback = 5;
    spd = 4;
    if (accuracy == 0){
        accuracy = creator.attack_dir;
        damage += 2;
    }
    hspd = lengthdir_x(knockback,accuracy);
    vspd = lengthdir_y(knockback,accuracy);
    decel = 1;
}

if (instant){
    if (time_stop){
        //particle trail variable set to true
        projectile_trail = true;
        hspd = lengthdir_x(spd,accuracy);
        vspd = lengthdir_y(spd,accuracy);
        //regular movement when time stopped
        ProjectileBounceCollisionWithWallGrid();
        //so that it doesn't_fade
        image_alpha = 1.1;
        scr_part_warpring_init_dir(accuracy-180);
        part_particles_create(global.ps,x,y,global.pt_warpring,1);
    } else {
        if (projectile_trail){
            if (sonicboom){
                var sonicboom_effect = instance_create(x,y,obj_effect_bullethit);
                sonicboom_effect.creator = self.id;
                sonicboom_effect.image_angle = accuracy;
                sonicboom_effect.image_speed = .35;
                sonicboom_effect.image_xscale = .75;
                sonicboom_effect.image_yscale = .75;
                sonicboom_effect.depth = -(y+1);
                sonicboom_effect.image_blend = make_colour_hsv(40,190,200);
                sonicboom = false;
            }
            scr_part_warpline_init_dir(accuracy-180);
            part_particles_create(global.ps,x+lengthdir_x(25,accuracy-180),y+lengthdir_y(25,accuracy-180),global.pt_warpline,1);
        }
        InstantShot();
        instance_destroy();    
    }
}
    
if (image_alpha &gt; 0){
    image_alpha -= .1;
} else {
    instance_destroy();
}

    /*
    draw_set_blend_mode(bm_add);
    draw_set_alpha(image_alpha);
    draw_line_width_colour(start_x,start_y,x,y,.6,c_gray,c_white);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
    */



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw instant line
if (!instant){
    draw_self();
    draw_set_blend_mode(bm_add);
    draw_set_alpha(image_alpha);
    draw_line_width_colour(line_start_x,line_start_y,x,y,1,c_gray,c_white);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
} else {
    if (time_stop){
        draw_self();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
