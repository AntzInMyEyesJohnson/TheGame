<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_melee_type</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>InitializeProjectile();
//for screen freezes
InitializeScreenFreezeVariables();
/*###############DAMAGE UPGRADE*/
damage = 0;
for(var i = 0;i &lt; ds_list_size(attached_upgrades);i++){
    if (attached_upgrades[| i] == DAMAGE_UP){
        damage = 1;
        break;
    }
}

AnimateAttackSprites(spr_katana_strikebox,spr_katana_strikebox2,spr_katana_strikebox3);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move projectile
depth = -(y+26);
//if(ScreenFreezeCheck()){exit;}
if (instance_exists(creator)){
    if (init_projectile == true){
        if (creator.object_index == obj_samurai){
            knockback = 3;
            img_spd = .3;//creator.img_spd;
            if (image_index == 0){
                if (creator.state == stateATTACK){
                    damage += 2;
                    accuracy = creator.attack_dir;
                    sprite_index = animate_attack[creator.ani_atkcombo];
                    projectile_particle = global.pt_spark;
                    projectile_hue = 20;
                    projectile_amount = 25;
                    projectile_sound = snd_samurai_attack_onhit;
                }
                if (creator.state == stateSPECIAL){
                    damage += 4;
                    accuracy = creator.spec_dir;
                    sprite_index = spr_assassinate_strikebox;
                    projectile_particle = global.pt_swordclash;
                    projectile_hue = 235;
                    projectile_sound = snd_samurai_attack_special_onhit;
                }
                if (creator.state == stateUNIQUE){
                    damage += 5;
                    ff_mode = 1;
                    accuracy = creator.ff_dir;
                    sprite_index = animate_attack[choose(0,1)];
                    projectile_particle = global.pt_swordclash;
                    projectile_hue = 235;
                    projectile_sound = snd_samurai_attack_special_onhit;
                }
                if (creator.state == stateACTION2){ 
                    damage += 3;
                    accuracy = creator.action_dir;
                    sprite_index = animate_attack[choose(0,1)];
                    projectile_particle = global.pt_spark;
                    projectile_hue = 20;
                    projectile_amount = 25;
                    projectile_sound = snd_samurai_attack_onhit;
                }
            }      
            init_projectile = false;
        }
        if (creator.object_index == obj_weapon_knife){
            damage += 1;
            knockback = 2;
            sprite_index = spr_knife_strikebox;
            if (image_index == 0){
                accuracy = creator.attack_dir;    
            }
            img_spd = .3;//creator.img_spd;
            init_projectile = false;
        }
        if (creator.object_index == obj_bandit){
            damage += 6;
            knockback = 1;
            sprite_index = spr_assassinate_strikebox;
            if (image_index == 0){
                accuracy = creator.assassinate_direction;    
            }
            img_spd = .2;//creator.img_spd;
            init_projectile = false;
        }
        if (creator.object_index == obj_viking){
            knockback = 4;
            sprite_index = spr_ax_strikebox;
            if (image_index == 0){
                if (creator.state == stateUNIQUE){
                    damage += 5;
                    ff_mode = 1;
                    accuracy = creator.ff_dir;
                }      
            }
            img_spd = .3;//creator.img_spd;
            init_projectile = false;
        }
        if (creator.object_index == obj_weapon_ax){
            damage += 4;
            knockback = 5;
            sprite_index = spr_ax_strikebox;
            if (image_index == 0){
                accuracy = creator.attack_dir;    
            }
            img_spd = .3;//creator.img_spd;
            init_projectile = false;
        }
    }
    if (specialPositioning == -1){
        x = creator.x;
        y = creator.y;
    } else {//used for samurai special state
        if (instance_exists(specialPositioning)){
            x = specialPositioning.x;
            y = specialPositioning.y;
        }
    }
} else {
    instance_destroy();
}


hitting_enemy = instance_place(x,y,obj_enemy_parent);

if (hitting_enemy != noone){
    if (projectile_particle != -1 and part_done == false){
        CreateParticle(projectile_particle,accuracy,projectile_amount,projectile_hue,hitting_enemy.x,hitting_enemy.y,-(y+50),ps_shape_rectangle,ps_distr_gaussian,spr_part_swordclash2);
        if(!audio_is_playing(projectile_sound)){
            PlaySound(projectile_sound,1,15,random_range(.9,1.1));
        }
    }
}
//if (projectile_particle &lt;= -2){
//    projectile_particle++;
//}

image_speed = img_spd-time_stop/5-time_slow/10;
image_speed = clamp(image_speed,0,1);
//for knockback purposes
hspd = lengthdir_x(knockback,accuracy);
vspd = lengthdir_y(knockback,accuracy);
image_angle = accuracy;
image_yscale = XscaleFlip(accuracy);

if (img_spd &gt; 0){
    if (image_index &gt;= floor(image_number-1)){
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
