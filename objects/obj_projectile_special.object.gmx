<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hook_arrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_ranged_type</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init bullet
InitializeProjectile();
//set max bounces
bounce_max = 2;
//for screen freezes
InitializeScreenFreezeVariables();
hooked_enemy = 'unhooked';
hooked_wall = false;
img_angle = 0;
owner = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///unhook
if (instance_exists(creator)){
    creator.already_hooked = false;
}

if (instance_exists(owner)){
    owner.grapple = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move projectile
//set depth
depth = -y;

//screen freeze for when I hit enemy
if (ScreenFreezeCheck()){exit;}

//check for creator in case player or weapon is destroyed while still in the air
if (instance_exists(obj_player)){     
    if (creator.object_index == obj_weapon_hook){
        damage += 0;
        knockback = 4;
        if (!movement_has_started){
            accuracy = random_range(creator.image_angle-1,creator.image_angle+1);
            spd = 8;
            //direction = accuracy;
        }
        bounce = bounce_max-1;
        //TODO make fireball sprite
        sprite_index = spr_hook_arrow;
        //image_index = 0;
        decel = 1;
    }   
} else {
    //if creator dies
    instance_destroy();
}

hitting_enemy = instance_place(x,y,obj_enemy_parent);

if (hitting_enemy != noone) {
    if (hooked_enemy == 'unhooked'){
        if (hitting_enemy.state != 'death'){
            hooked_enemy = 'hooking';
            creator.already_hooked = true;
        }
    }
}

if (movement_has_started){
    if (hooked_enemy == 'hooked'){
        //go back towards player
        accuracy = point_direction(x,y,creator.x,creator.y);
        
        if (spd &lt;= 4){
            spd += 1.5;
        } else {
            spd = 4;
        }
        if (instance_place(x,y,creator)){
            instance_destroy();
        }
    } 
}

SpecialProjectileCollisionWithWallGrid();

if (hooked_wall == true and hooked_enemy == 'unhooked'){
    if (owner.grapple == noone){
        owner.grapple = self.id;
    }
    if (instance_place(x,y,owner)){
        instance_destroy();
    }
}

if (hooked_enemy == 'hooking'){
    hooked_enemy = 'hooked';
    spd = -4;
}   

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy when outside view
instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bullet draw
//draw_sprite(sprite_index,image_index,x,y);
if (instance_exists(creator)){
    if (time_stop == true){
        var atemp_dir = accuracy;
        var atemp_x = x + lengthdir_x(distance_to_object(creator),atemp_dir-180);
        var atemp_y = y + lengthdir_y(distance_to_object(creator),atemp_dir-180);
        var astart_x = atemp_x;
        var astart_y = atemp_y;
        var line_collision = (grid_place_meeting(atemp_x,atemp_y,-1));
        while (!line_collision and point_distance(astart_x,astart_y,atemp_x,atemp_y) &lt; room_width){
            atemp_x += lengthdir_x(4,atemp_dir);
            atemp_y += lengthdir_y(4,atemp_dir);
            line_collision = (grid_place_meeting(atemp_x,atemp_y,-1));
        }
        draw_set_blend_mode(bm_add);
        var line_alpha = min(sin(degtorad((current_time)))+1,.6);
        draw_set_alpha(line_alpha);
        draw_line_width_colour(astart_x,astart_y,atemp_x,atemp_y,1,c_maroon,c_red);
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
    }    
}
//draw self last so it is in front of line
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,img_angle,c_white,1); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
