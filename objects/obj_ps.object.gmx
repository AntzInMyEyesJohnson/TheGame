<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create particle system
global.ps = part_system_create();

global.ps_standard = part_system_create();
global.em_standard = part_emitter_create(global.ps_standard);

global.ps_depth = part_system_create();
global.em_depth = part_emitter_create(global.ps_depth);

//time particle effects
global.ps_time = part_system_create();
part_system_depth(global.ps_time,-2000);
global.em_time = part_emitter_create(global.ps_time);

//initialize particles
scr_part_fire_init_dir(0);
scr_part_blood_spat_init_dir(0);
scr_part_spark_init_dir(0,0);
scr_part_slime_spat_init_dir(0);
scr_part_shockwave_init_dir(0);
scr_part_warpring_init_dir(0);
scr_part_warpline_init_dir(0);
scr_part_swordclash_init(0,190,spr_part_swordclash2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set emitters
/*
if (instance_exists(obj_player)){
    var pos = obj_player;
    if (time_stop){
        part_emitter_region(global.ps_time,global.em_time,pos.x-0,pos.x+0,pos.y-0,pos.y+0,ps_shape_ellipse,ps_distr_linear);
        if (part_particles_count(global.ps_time) == 0){
            part_emitter_burst(global.ps_time,global.em_time,global.pt_shockwave,7);
        }
    }
}
/*
if (global.weather_type == 'snow'){
    if (salarm &lt; 0){
        salarm = 500;
    }
}
if (salarm &gt;= 0) {
        salarm -= 1;
}


//Update weather emitter
switch (global.weather_type){
    case 'normal':
    break;
    case 'rain':
        //falls behind trees and has a puddle
        part_emitter_region(global.ps_weather,global.em_weather,
                           view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_weather,global.em_weather,global.pt_rain,20);
        //falls in front of trees and doesn't have a puddle
        part_emitter_region(global.ps_depth,global.em_weatherd,
                            view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_depth,global.em_weatherd,global.pt_rainno,10);
    break;
     case 'heavyrain':
        //falls behind trees and has a puddle
        part_emitter_region(global.ps_weather,global.em_weather,
                            view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_weather,global.em_weather,global.pt_rain,30);
        //falls in front of trees and doesn't have a puddle
        part_emitter_region(global.ps_depth,global.em_weatherd,
                            view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_depth,global.em_weatherd,global.pt_rainno,20);
    break;
    case 'snow':
        //falls behind trees and has a puddle
        part_emitter_region(global.ps_weather,global.em_weather,
                            view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_weather,global.em_weather,global.pt_snow,30);
        //falls in front of trees and doesn't have a snowbank
        part_emitter_region(global.ps_depth,global.em_weatherd,
                            view_xview-200,view_xview+view_wview+600,
                            view_yview-200, view_yview-200,
                            ps_shape_line,ps_distr_linear);
        part_emitter_burst(global.ps_depth,global.em_weatherd,global.pt_snowno,15);
    break;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clear particles at room end
part_particles_clear(global.ps);
part_emitter_clear(global.ps_time, global.em_time);
part_emitter_clear(global.ps_standard, global.em_standard);
part_emitter_clear(global.ps_depth, global.em_depth);
part_particles_clear(global.ps_time);
part_particles_clear(global.ps_standard);
part_particles_clear(global.ps_depth);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(global.pt_fire);
part_type_destroy(global.pt_slimespatter);
part_type_destroy(global.pt_slime);
part_type_destroy(global.pt_spatter);
part_type_destroy(global.pt_blood);
part_type_destroy(global.pt_shockwave);
part_type_destroy(global.pt_warpring);
part_type_destroy(global.pt_warpline);
part_type_destroy(global.pt_spark2);
part_type_destroy(global.pt_spark);
part_type_destroy(global.pt_swordclash2);
part_type_destroy(global.pt_swordclash);
part_emitter_destroy(global.ps_time,global.em_time);
part_emitter_destroy(global.ps_standard,global.em_standard);
part_emitter_destroy(global.ps_depth,global.em_depth);
part_system_destroy(global.ps_time);
part_system_destroy(global.ps);
part_system_destroy(global.ps_depth);
part_system_destroy(global.ps_standard);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw to surface
/*
if (salarm == 0) {
    surface_set_target(obj_surface.surf);
        part_system_drawit(global.ps_weather);
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
