<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_samurai_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_samurai_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();
kills_required = 3;
swords_direction = 0;
swords_speed = 360/room_speed;
swords_x = 0;
swords_y = 0;
AnimateMoveSprites(spr_samurai_move,spr_samurai_moved,spr_samurai_moveu);
AnimateAttackSprites(spr_samurai_slash,spr_samurai_slash2);
animate_idle = spr_samurai_idle;
animate_action1 = spr_samurai_dash;
animate_action2 = spr_samurai_dash;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player step
//set depth
depth = -(y+4);

//when hitting enemy the screen will freeze
if (ScreenFreezeCheck()){exit;}

//samurai state checks
SamuraiChecks(state);

/* State Machine */
switch(state){
    case stateFREE:
        PlayerMovement();
        PlayerSwapSecondary();
    break;
    case stateACTION1:
        //animation
        sprite_index = animate_action1;
        image_index = round(action_dir/45);
        var dash_length = 10;
        var spd = 7+action_combo; 
        spd = clamp(spd,8,12);
        if (action1_timer &lt;= dash_length){//hyper light drifter 15/30 long.  first 5-8 is when he moves.
            can_combo = false;
            hspd = Tween(EASESMOOTHER,0,lengthdir_x(spd,action_dir),action1_timer,dash_length);
            vspd = Tween(EASESMOOTHER,0,lengthdir_y(spd,action_dir),action1_timer,dash_length);
        } else if (action1_timer &lt;= action1_length){
            can_combo = true;
            hspd *= .8;
            vspd *= .8;
        } else {
            can_combo = false;
            hspd = 0;
            vspd = 0;
            state = stateFREE;
        }
    break;
    case stateATTACK:
        hspd *= .9;
        vspd *= .9;
        sprite_index = animate_attack[ani_atkcombo];
        img_xsc = XscaleFlip(attack_dir);
        img_spd = 0;
        image_index = AnimateToAlarm(attack_length,attack_alarm);//Tween(EASEINCUBIC,0,attack_length/(image_number-1),attack_alarm,attack_length);
        if(round(attack_alarm) == 0){
            state = stateFREE;
        }
    break;
    case stateACTION2:
        //animation
        sprite_index = animate_action2;
        image_index = round(action_dir/45);
        var dash_length = 8;
        var spd = 9+action_combo; 
        spd = clamp(spd,10,14);
        if (action2_timer == 0){
            var projectile = instance_create(x + lengthdir_x(8,action_dir),y + lengthdir_y(8,action_dir),obj_projectile_melee);
            projectile.creator = self.id;
        }
        if (action2_timer &lt;= dash_length){
            can_combo = false;
            hspd = Tween(EASESMOOTHER,0,lengthdir_x(spd,action_dir),action2_timer,dash_length);
            vspd = Tween(EASESMOOTHER,0,lengthdir_y(spd,action_dir),action2_timer,dash_length);
        } else if (action2_timer &lt;= action2_length){
            can_combo = true;
            hspd *= decel;
            vspd *= decel;
        } else {
            can_combo = false;
            hspd = 0;
            vspd = 0;
            state = stateFREE;
        }
    break;
    case stateHIT:
        PlayerHitState()
    break;
    case stateSPECIAL:
        ThousandSwords();
    break;
    case stateUNIQUE:
        sprite_index = animate_action1;
        image_index = round(ff_dir/45);
        img_spd = 0;
        FreeflowState();
    break;
    case stateLOCKED:
        PlayerLockedState();
    break;
    case stateDEATH:
        PlayerDeathState(spr_samurai_death);
        //room_restart();
    break;
}
//Increment 'last' timers
IncrementTimers();

//facing
if (state == stateATTACK){
    image_xscale = img_xsc;
} else {
    if (hspd != 0){
        image_xscale = sign(hspd);
    }
}


//Scale change
image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;

PlayerCollisionWithWallGrid();
FreeflowListManagement();
HitbyListManagement();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow and self
draw_sprite_ext(spr_player_shadow,0,x,y-3,scale_factor,scale_factor,0,c_white,.4);

if (state == stateACTION1){ 
    if(action1_timer == 1){ 
        if (action_combo &gt;= 2){
            create_motion_trail(2,200,round(action_dir/15)*15,scale_factor,12,spr_samurai_dash_effect,0,true);
        } else {
            create_motion_trail(2,150,0,scale_factor,15,sprite_index,image_index);
        }
    }
} else if (state == stateACTION2){ 
    if(action2_timer &gt; 0){ 
        if (!instance_exists(obj_surface_trails)){
            create_motion_trail(4,150,0,scale_factor,20,sprite_index,image_index);
        }
    }
}else if (state == stateSPECIAL){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(12,150,0,scale_factor,round(juice1_left*room_speed),sprite_index,image_index);
    }
} else if (state == stateUNIQUE){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(8,0,0,scale_factor,40,sprite_index,image_index);
    }
} 


if (ff_target != noone and instance_exists(ff_target)){
    draw_line(x,y,ff_target.x,ff_target.y);    
}


//draw self
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
