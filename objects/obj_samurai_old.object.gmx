<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_samurai_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_samurai_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();

swords_direction = 0;
swords_speed = 360/room_speed;
swords_x = 0;
swords_y = 0;
AnimateMoveSprites(spr_samurai_move,spr_samurai_moved,spr_samurai_moveu);
animate_idle = spr_samurai_idle;
animate_attack = spr_samurai_slash;
animate_action1 = spr_samurai_dash;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list and swords queue
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player step
//set depth
depth = -(y+4);
//when hitting enemy the screen will freeze
if (ScreenFreezeCheck()){exit;}
//freeflow checker
if (FreeflowCheck(x,y,300,obj_enemy_parent,false,true,4) and state != stateFREEFLOW){
    FreeflowAbility();
}
//for when the player is using the grapple weapon
if (GrappleCheck()){
    //propels player towards the hook projectile embedded in the wall
    hspd = lengthdir_x(grap_spd,grap_dir);
    vspd = lengthdir_y(grap_spd,grap_dir);
    PlayerCollisionWithWallGrid();
    exit;
} 
//give starting weapon
if (given_starting_weapon == true){
    weapon[selected_weapon_index] = starting_weapon.id;
    weapon_count++;
    starting_weapon.state = 'unholstered';
    given_starting_weapon = false;
}
/* State Machine */
switch(state){
    case stateFREE:
        GetMovementInput();
        PlayerMovement();
        PlayerSwapSecondary();
        SamuraiAbility();
        SamuraiSpecial();
    break;
    case stateFREEFLOW:
        sprite_index = animate_action1;
        image_index = round(ff_dir/45);
        FreeflowState();
    break;
    case stateSPECIAL:
        ThousandSwords();
    break;
    case stateACTION1:
        //animation
        sprite_index = animate_action1;
        image_index = round(charge_direction/45);
        var dash_length = 8;
        //start decelerating at .2 of a second
        if (action1_timer &gt; dash_length){
            state = stateFREE;
        } else{
            hspd = Tween(EASEINOUTCIRC,lengthdir_x(3,charge_direction),lengthdir_x(12,charge_direction),action1_timer,dash_length);
            vspd = Tween(EASEINOUTCIRC,lengthdir_y(3,charge_direction),lengthdir_y(12,charge_direction),action1_timer,dash_length);
        }
    break;
    case stateATTACK:
        hspd *= decel;
        vspd *= decel;
        sprite_index = animate_attack;
        img_spd = 0;
        image_index = Tween(EASEINCIRC,0,attack_length/(image_number-1),attack_alarm,attack_length);
        if(round(attack_alarm) == 0){
            state = stateFREE;
        }
    break;
    case stateLOCKED:
        PlayerLockedState();
    break;
    case stateHIT:
        PlayerHitState()
        
    break;
    case stateDEATH:
        PlayerDeathState(spr_samurai_death);
        //room_restart();
    break;
}
//Increment 'last' timers
IncrementTimers();

if (instance_exists(obj_projectile_melee)){
    if (state != stateATTACK and state != stateLOCKED and state != stateFREEFLOW){
        attack_length = round(between_attack_time*room_speed);
        attack_alarm = attack_length;
        state = stateATTACK;
    }
}

//facing
if (hspd != 0){
    if (state == stateLOCKED){
        image_xscale = img_xsc;
    } else {
        image_xscale = sign(hspd);
    }
} 

/* Scale change*/
image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;

if (PlayerHitByProjectile()){
    if (state != stateDEATH and state != stateSPECIAL and state != stateFREEFLOW){
        if (ds_list_find_index(hitby_list,incoming_enemy_projectile) == -1){
            ds_list_add(hitby_list,incoming_enemy_projectile);
            hitby_list_timer = room_speed*10;
            //knockback
            hspd += incoming_enemy_projectile.hspd;
            vspd += incoming_enemy_projectile.vspd;
            
            //play player hit sound
            PlaySound(snd_hit3,1,15,random_range(1,1.1));
            
            player_health -= incoming_enemy_projectile.damage;
            if (player_health &lt;= 0){
                state = stateDEATH;
            } else {
                hit_timer = 0;
                state = stateHIT;
            }
        }
    }
}

PlayerCollisionWithWallGrid();

FreeflowListManagement();
HitbyListManagement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw shadow and self
//draw shadow
draw_sprite_ext(spr_player_shadow,0,x,y-2,scale_factor,scale_factor,0,c_white,.4);

if (state == stateACTION1 and action1_timer &gt; 1){ 
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(3,150,0,scale_factor,15,sprite_index,image_index);
    }
} else if (state == stateSPECIAL){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(12,150,0,scale_factor,round(swords_juice_left*room_speed),sprite_index,image_index);
    }
} else if (state == stateFREEFLOW and ff_timer &gt; 1){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(8,0,0,scale_factor,40,sprite_index,image_index);
    }
} 

draw_set_colour(c_yellow);
if (ff_target != noone and instance_exists(ff_target)){
    draw_line(x,y,ff_target.x,ff_target.y);    
}
draw_set_colour(c_white);

//draw self
draw_self();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>



