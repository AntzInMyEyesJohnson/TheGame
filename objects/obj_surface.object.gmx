<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init surface variable
dead_sf = -1;
time_sf = -1;
clear_from_ff = false;
ff_alpha = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy surfaces
if (surface_exists(dead_sf)) {
    surface_free(dead_sf);
}

if (surface_exists(time_sf)) {
    surface_free(time_sf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy surfaces
if (surface_exists(dead_sf)) {
    surface_free(dead_sf);
}

if (surface_exists(time_sf)) {
    surface_free(time_sf);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create surface
if (!surface_exists(dead_sf)) {
    dead_sf = surface_create(room_width, room_height);
    surface_set_target(dead_sf);
    draw_clear_alpha(c_black,0);
    surface_reset_target();
} else {
    depth = 0;
    draw_surface(dead_sf,0,0);
}

if (instance_exists(obj_player) and time_stop){
    depth = -2000;
    if (!surface_exists(time_sf)){
        time_sf = surface_create(32, 32);
        sf_timer = 0;
    }
    
    if (sf_timer mod 4 == 0 and surface_get_width(time_sf) &lt; 512){
        if (sf_timer mod 12 == 0){
            surface_resize(time_sf, surface_get_width(time_sf)-16, surface_get_height(time_sf)-4);
        } else {
            surface_resize(time_sf, surface_get_width(time_sf)+32, surface_get_height(time_sf)+16);
        }
    }
    
    sf_timer++;   
    
    surf_w = surface_get_width(time_sf);
    surf_h = surface_get_height(time_sf);
    surf_x = obj_player.x-surf_w/2;
    surf_y = obj_player.y-surf_h/2;
    
    // Draw 'shader'
    surface_set_target(time_sf);
    draw_clear_alpha(c_blue, .35);// Clear surface
    surface_reset_target();
    
    // Draw surface to screen
    draw_surface(time_sf, obj_player.x-surf_w/2, obj_player.y-surf_h/2);
}

/*
if (instance_exists(obj_player)){
    if (obj_player.state == stateUNIQUE){
        if (ff_alpha &lt; 1){
            ff_alpha += .05;
        } else {
            ff_alpha = 1;
        }
        depth = -5000;
        //draw to surface
        surface_set_target(dead_sf);
        draw_set_colour(c_black);
        draw_set_alpha(ff_alpha);
        draw_rectangle(0,0,room_width,room_height,false);
        draw_set_colour(c_white);
        draw_set_alpha(1);
        draw_rectangle(obj_player.x-25,0,obj_player.x+25,room_height,false);
        draw_rectangle(0,obj_player.y-25,room_width,obj_player.y+25,false);
        clear_from_ff = true;
        draw_set_alpha(1);
        surface_reset_target();
    }else{
        if (clear_from_ff == true){
            
            surface_set_target(dead_sf);
            draw_clear_alpha(c_black,0);
            clear_from_ff = false;
            ff_alpha = 0;
            surface_reset_target();
        }
    }
}
*/

/*
if (time_stop){
    GetMainInput();
    if main_keyp{
        WarpDraw(0,0,obj_player.x,obj_player.y,view_wview,view_hview,20,120,-20);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
