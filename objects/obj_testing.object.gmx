<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set gui to current vie
testing = false;
champion[4] = obj_wizard;

champion[3] = obj_viking;

champion[2] = obj_samurai;

champion[1] = obj_gunslinger;

champion[0] = obj_bandit;

champion_selecting = undefined;
champion_selected = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pressing enter
if (keyboard_check_pressed(vk_enter)){
    if (testing == true){
        testing = false;
    } else {
        testing = true;
    }
}

if (keyboard_check_pressed(vk_tab)){
    if (debug == true){
        debug = false;
    } else {
        debug = true;
    }
}

if (testing){
    if (keyboard_check_pressed(ord('1'))){
        champion_selecting = champion[0];
        curPly = 0;
    } else if (keyboard_check_pressed(ord('2'))){
        champion_selecting = champion[1];
        curPly = 1;
    } else if (keyboard_check_pressed(ord('3'))){
        champion_selecting = champion[2];
        curPly = 2;
    } else if (keyboard_check_pressed(ord('4'))){
        champion_selecting = champion[3];
        curPly = 3;
    } else if (keyboard_check_pressed(ord('5'))){
        champion_selecting = champion[4];
        curPly = 4;
    }
    
    //button pressed so champion selecting exists, then set mychamp to champion selecting
    if (is_real(champion_selecting)){
        if (instance_exists(champion_selected)){
            with (champion_selected){
                instance_destroy();
            }
            with (instance_exists(obj_weapon_parent)){
                instance_destroy();
            }
            champion_selected = instance_create(room_width/2,room_height/2,champion_selecting);
            champion_selected.given_starting_weapon = true;
            champion_selecting = undefined;
        } else {
            champion_selected = instance_create(room_width/2,room_height/2,champion_selecting);
            champion_selected.given_starting_weapon = true;
            champion_selecting = undefined;
        }
    }  
    
    if (instance_exists(obj_player)){
        if (keyboard_check_pressed(vk_numpad0)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_mercenary);
        } else if (keyboard_check_pressed(vk_numpad1)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_mole);
        } else if (keyboard_check_pressed(vk_numpad2)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_hunter);
        } else if (keyboard_check_pressed(vk_numpad3)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_axman);
        } else if (keyboard_check_pressed(vk_numpad4)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_ninja);
        } else if (keyboard_check_pressed(vk_numpad5)){
            repeat(3)
                instance_create(obj_player.x,obj_player.y-90,obj_assassin);
        } else if (keyboard_check_pressed(vk_numpad6)){
            repeat(3)
                instance_create(obj_player.x+100,obj_player.y,obj_slime);
        }
    } 
}
/*
///turn on ability power up
if (instance_exists(obj_player)){
    if (keyboard_check_pressed(ord('1'))){
        if (obj_player.ability_power_up == false){
            obj_player.ability_power_up = true;
        } else{
            obj_player.ability_power_up = false;
        }
    }
}

///turn on ability power up
if (instance_exists(obj_player)){
    if (keyboard_check_pressed(ord('2'))){
        if (obj_player.special_power_up == false){
            obj_player.special_power_up = true;
        } else{
            obj_player.special_power_up = false;
        }
    }
}

///turn on ability power up
if (instance_exists(obj_player)){
    if (keyboard_check_pressed(ord('3'))){
        if (obj_weapon_parent.attack_power_up == false){
            obj_weapon_parent.attack_power_up = true;
        } else{
            obj_weapon_parent.attack_power_up = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///put all relavent variables on gui
if (testing == true and instance_exists(obj_player)){
    show_debug_overlay(true);
    display_set_gui_size(display_get_width(),display_get_height());
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(fnt_debug);
    draw_set_color(c_white);
    draw_text(20,200,"state: " + string(obj_player.state));
    draw_text(20,225,"difficulty: " + string(global.difficulty));
    draw_text(20,250,"stage: " + string(global.stage));
    draw_text(20,275,"level: " + string(global.level));
    draw_text(20,300,"map_terrain_wall: " + background_get_name(global.map_terrain_wall));
    draw_text(20,325,"map_terrain_floor: " + background_get_name(global.map_terrain_floor));
    draw_text(20,350,"map_terrain_background: " + background_get_name(global.map_terrain_background));
    draw_text(20,375,"hspd: " + string(obj_player.hspd));
    draw_text(20,400,"vspd: " + string(obj_player.vspd));
    draw_text(20,430,"view_wview: " + string(view_wview) +
                     "#view_hview: " + string(view_hview) +
                     "#view_wport: " + string(view_wport) +  
                     "#view_hport: " + string(view_hport));
    draw_text(400,25,"ability: " + string(obj_player.ability_power_up) +
                    " special: " + string(obj_player.special_power_up) +
                    /*" weapon: " + string(obj_weapon_parent.attack_power_up) +*/
                    " time_slow: " + string(time_slow) +
                    " time_stop: " + string(time_stop));
    draw_text(1400,300,"kill_count: " + string(kill_count) + 
                      "#kill_combo_count: " + string(kill_combo_count) +
                      "#kill_combo_alarm: " + string(kill_combo_alarm));
                      
    if (instance_exists(obj_projectile_melee)){
        draw_text(900,200,"ff_mode: " + string(obj_projectile_melee.ff_mode) + 
                      "#hitting_enemy: " + string(obj_projectile_melee.hitting_enemy) +
                      "#damage: " + string(obj_projectile_melee.damage));   
    } else {
        draw_text(900,200,"ff_mode: " + "null" + 
                      "#hitting_enemy: " + "null" +
                      "#damage: " + "null");
    }    
    //draw_text(320,175,"queue size: " + string(ds_queue_size(obj_samurai.swords_queue)));
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
