<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_upgrade_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the upgrades
up_list = ds_list_create();
ds_list_add(up_list,START_WEP,ABILI_POW,WEAK_ENEM,MORE_HEAL,ATK_SPEED,DAMAGE_UP);
spr = 0;
text = 1;
toggle = 2;
selected = 3;
upgrade[START_WEP,spr] = spr_upgrade_test;
upgrade[START_WEP,text] = "Starting Weapon";
upgrade[START_WEP,toggle] = false;
upgrade[START_WEP,selected] = false;

upgrade[ABILI_POW,spr] = spr_upgrade_test;
upgrade[ABILI_POW,text] = "Ability Power";
upgrade[ABILI_POW,toggle] = false;
upgrade[ABILI_POW,selected] = false;

upgrade[WEAK_ENEM,spr] = spr_upgrade_test;
upgrade[WEAK_ENEM,text] = "Weaker Enemies";
upgrade[WEAK_ENEM,toggle] = false;
upgrade[WEAK_ENEM,selected] = false;

upgrade[MORE_HEAL,spr] = spr_upgrade_test;
upgrade[MORE_HEAL,text] = "More Health";
upgrade[MORE_HEAL,toggle] = false;
upgrade[MORE_HEAL,selected] = false;

upgrade[ATK_SPEED,spr] = spr_upgrade_test;
upgrade[ATK_SPEED,text] = "Attack Speed";
upgrade[ATK_SPEED,toggle] = false;
upgrade[ATK_SPEED,selected] = false;

upgrade[DAMAGE_UP,spr] = spr_upgrade_test;
upgrade[DAMAGE_UP,text] = "Damage";
upgrade[DAMAGE_UP,toggle] = false;
upgrade[DAMAGE_UP,selected] = false;

upgrade_type = -1;

//unique stuff
xport_pos = 0;
yport_pos = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomly choose upgrades each room start
//shuffle the remaining upgrades
upgrade_type = ds_list_shuffle(up_list);
//remove from list
ds_list_delete(up_list,ds_list_find_index(up_list,upgrade_type));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
ds_list_destroy(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw upgrade
display_set_gui_size(display_get_width(),display_get_height());
x = xport_pos;
y = yport_pos;
GetMainInput();
//find corners of our button
BoxTop = y - 50;
BoxBottom = y + 50;
BoxLeft = x - 100;
BoxRight = x + 100;


if(device_mouse_x_to_gui(0) &gt; BoxLeft and device_mouse_x_to_gui(0) &lt; BoxRight and device_mouse_y_to_gui(0) &gt; BoxTop and device_mouse_y_to_gui(0) &lt; BoxBottom){
    image_alpha = 1;
    draw_set_alpha(1);
    if (main_keyp){
        if (!instance_exists(obj_fade_out)){
            if (ds_list_find_index(obj_controller.attached_upgrades,upgrade_type) == -1){
                ds_list_add(obj_controller.attached_upgrades,upgrade_type);
                instance_create(x,y,obj_fade_out);
                //room_goto(rm_generator_test);
            }
        }
    }
} else {
    draw_set_alpha(.65);
    image_alpha = .65;
}

draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,image_alpha);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_select);
draw_set_colour(c_white);
draw_text(x,y+80,upgrade[upgrade_type,text]);
draw_set_halign(fa_top);
draw_set_valign(fa_left);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>



