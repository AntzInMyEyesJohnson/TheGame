<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize the upgrades
globalvar spr,text,toggle,selected,upgrade;
spr = 0;
text = 1;
toggle = 2;
selected = 3;
upgrade[MAIN_WEAP,spr] = obj_player.starting_weapon.sprite_index;
upgrade[MAIN_WEAP,text] = "Weapon Power";
upgrade[MAIN_WEAP,toggle] = false;
upgrade[MAIN_WEAP,selected] = false;

upgrade[ABILI_POW,spr] = spr_upgrade_test;
upgrade[ABILI_POW,text] = "Ability Power";
upgrade[ABILI_POW,toggle] = false;
upgrade[ABILI_POW,selected] = false;

upgrade[WEAK_ENEM,spr] = spr_upgrade_test;
upgrade[WEAK_ENEM,text] = "Weaker Enemies";
upgrade[WEAK_ENEM,toggle] = false;
upgrade[WEAK_ENEM,selected] = false;

upgrade[MORE_HEAL,spr] = spr_upgrade_test;
upgrade[MORE_HEAL,text] = "More Health";
upgrade[MORE_HEAL,toggle] = false;
upgrade[MORE_HEAL,selected] = false;

upgrade[ATK_SPEED,spr] = spr_upgrade_test;
upgrade[ATK_SPEED,text] = "Attack Speed";
upgrade[ATK_SPEED,toggle] = false;
upgrade[ATK_SPEED,selected] = false;

upgrade[DAMAGE_UP,spr] = spr_upgrade_test;
upgrade[DAMAGE_UP,text] = "Damage";
upgrade[DAMAGE_UP,toggle] = false;
upgrade[DAMAGE_UP,selected] = false;

upgrade[SPEC_MOVE,spr] = spr_upgrade_test;
upgrade[SPEC_MOVE,text] = "Special Power";
upgrade[SPEC_MOVE,toggle] = false;
upgrade[SPEC_MOVE,selected] = false;

upgrade_type = -1;
slot1 = -1;
slot2 = -1;
slot3 = -1;
slot4 = -1;

xport_pos = 0;
yport_pos = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(up_list,ds_type_list){
    ds_list_destroy(up_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create list and randomly choose upgrades each room start
if (room == rm_upgrade){
    //create upgrades list
    up_list = ds_list_create();
    ds_list_add(up_list,MAIN_WEAP,ABILI_POW,WEAK_ENEM,MORE_HEAL,ATK_SPEED,DAMAGE_UP,SPEC_MOVE);
    
    //delete upgrades already selected from the list
    for(var i = 0;i &lt; ds_list_size(up_list);i++){
        if (upgrade[up_list[| i],selected] == true){
            ds_list_delete(up_list,i);
        }
    }
    
    //shuffle the remaining upgrades
    ds_list_shuffle(up_list);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(up_list,ds_type_list){
    ds_list_destroy(up_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw upgrade
if (room = rm_upgrade){
    display_set_gui_size(display_get_width(),display_get_height());
    draw_set_font(fnt_debug);
    draw_text(5,5,'upgrade list size = ' + string(ds_list_size(up_list)));
    GetMainInput();
    //set upgrade type to the (0) position in the shuffled list
    upgrade_type = up_list[| 0];
    //first button
    if (ButtonUpgradePressed(display_get_width()/4,display_get_height()/3,upgrade_type)){
        if (!instance_exists(obj_fade_out)){
             //upgrade type not in the attached upgrades list
            if (ds_list_find_index(attached_upgrades,upgrade_type) == -1){
                //add upgrade type to the attached upgrades list
                ds_list_add(attached_upgrades,upgrade_type);
                //set the upgrade type to true so it is not selected again
                upgrade[upgrade_type,selected] = true;
                //go to next room
                instance_create(x,y,obj_fade_out);
            }
        }
    }
    //set upgrade type to the (1) position in the shuffled list
    upgrade_type = up_list[| 1];
    //second button
    if (ButtonUpgradePressed(3*display_get_width()/4,display_get_height()/3,upgrade_type)){
        if (!instance_exists(obj_fade_out)){
            //upgrade type not in the attached upgrades list
            if (ds_list_find_index(attached_upgrades,upgrade_type) == -1){
                //add upgrade type to the attached upgrades list
                ds_list_add(attached_upgrades,upgrade_type);
                //set the upgrade type to true so it is not selected again
                upgrade[upgrade_type,selected] = true;
                //go to next room
                instance_create(x,y,obj_fade_out);
            }
        }
    }
    //set upgrade type to the (2) position in the shuffled list
    upgrade_type = up_list[| 2];
    //third button
    if (ButtonUpgradePressed(display_get_width()/4,2*display_get_height()/3,upgrade_type)){
        if (!instance_exists(obj_fade_out)){
             //upgrade type not in the attached upgrades list
            if (ds_list_find_index(attached_upgrades,upgrade_type) == -1){
                //add upgrade type to the attached upgrades list
                ds_list_add(attached_upgrades,upgrade_type);
                //set the upgrade type to true so it is not selected again
                upgrade[upgrade_type,selected] = true;
                //go to next room
                instance_create(x,y,obj_fade_out);
            }
        }
    }
    //set upgrade type to the (3) position in the shuffled list
    upgrade_type = up_list[| 3];
    //fourth button
    if (ButtonUpgradePressed(3*display_get_width()/4,2*display_get_height()/3,upgrade_type)){
        if (!instance_exists(obj_fade_out)){
             //upgrade type not in the attached upgrades list
            if (ds_list_find_index(attached_upgrades,upgrade_type) == -1){
                //add upgrade type to the attached upgrades list
                ds_list_add(attached_upgrades,upgrade_type);
                //set the upgrade type to true so it is not selected again
                upgrade[upgrade_type,selected] = true;
                //go to next room
                instance_create(x,y,obj_fade_out);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
