<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_viking_move</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_viking_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();
berserk = false;
shield_health = 0;
AnimateMoveSprites(spr_viking_move,spr_viking_moved,spr_viking_moveu);
AnimateFreeflowSprites(spr_viking_attack,spr_viking_attackd,spr_viking_attacku);
animate_idle = spr_viking_idle;
//animate_freeflow = spr_viking_freeflow;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get depth
depth = -(y+4);

if (ScreenFreezeCheck()){exit;}

//viking state checks
VikingChecks(state);

switch(state){
    case stateFREE:
        PlayerMovement();
        PlayerSwapSecondary();
    break;
    case stateUNIQUE:
        BerserkState();
    break;
    case stateACTION2:
        PlayerMovement();
        if (weapon_number == 1){
            if (action2_timer == 0){
                if (!instance_exists(obj_shield)){//create shield object
                    var shield = instance_create(x,y,obj_shield);
                    shield.creator = self.id;
                }
            }
            if (PlayerHitByProjectile()){
                //deflect that bitch
                var d_dir = point_direction(0,0,incoming_khspd,incoming_kvspd)-180;
                var projectile = instance_create(x+lengthdir_x(8,d_dir),y+lengthdir_y(8,d_dir),obj_projectile_deflect);
                projectile.creator = incoming_creator;
                projectile.accuracy = d_dir;
                with(incoming_enemy_projectile){
                    instance_destroy();
                }
            }
            if (!ability_keyc or shield_health &lt;= 0){
                state = stateFREE;
            }
        } else {
            //2nd weapon moves
        }
    break;
    case stateATTACK:
        hspd *= .9;
        vspd *= .9;
        sprite_index = animate_attack;
        img_xsc = XscaleFlip(attack_dir);
        img_spd = 0;
        image_index = Tween(EASEINCIRC,0,attack_length/(image_number-1),attack_alarm,attack_length);
        if(round(attack_alarm) == 0){
            state = stateFREE;
        }
    break;
    case stateACTION1:
        PlayerMovement(); 
        if (weapon_number == 1){
            if (action1_timer == 0){
                if (!instance_exists(obj_shield)){//create shield object
                    var shield = instance_create(x,y,obj_shield);
                    shield.creator = self.id;
                }
            }
            if (PlayerHitByProjectile()){
                //shield that bitch
                shield_health -= incoming_damage;
            }
            if (!ability_keyc or shield_health &lt;= 0){
                state = stateFREE;
            }
        } else {
            //2nd weapon moves
        }
    break;
    case stateHIT:
        PlayerHitState();
    break;
    case stateSPECIAL:
        if (weapon_number == 1){
            weapon_number = 2;
        } else {
            weapon_number = 1;
        }
        state = stateFREE;
    break;
    case stateLOCKED:
        PlayerLockedState();
    break;
    case stateDEATH:
        PlayerDeathState(spr_viking_death);
    break;
}
//Increment 'last' timers
IncrementTimers();

//facing
if (state == stateATTACK){
    image_xscale = img_xsc;
} else {
    if (hspd != 0){
        image_xscale = sign(hspd);
    }
}

//Scale change
image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;

PlayerCollisionWithWallGrid();
FreeflowListManagement();
HitbyListManagement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw viking
//draw shadow
draw_sprite_ext(spr_player_shadow,0,x,y,scale_factor,scale_factor,0,c_white,.4);

//draw self
draw_self();

/*
if (berserk == true){
    if (!instance_exists(obj_surface_trails)){
        create_motion_trail(9,0,0,scale_factor,9,sprite_index,image_index);
    }
} else {
    if (state == stateUNIQUE and ff_timer &gt; 1){
        if (!instance_exists(obj_surface_trails)){
            create_motion_trail(9,235,0,scale_factor,27,sprite_index,image_index);
        }
    }
} 

draw_set_colour(c_yellow);
if (ff_target != noone and instance_exists(ff_target)){
    draw_line(x,y,ff_target.x,ff_target.y);    
}
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
