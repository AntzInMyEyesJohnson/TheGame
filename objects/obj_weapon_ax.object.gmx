<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_ax</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_weapon_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init ax
owner = noone;
state = 'canbepickedup';
between_cleave_time = .6;//1 1/4 second
last_cleave_timer = between_cleave_time;
recoil = 0;
recoil_direction = 0;
attack_dir = 0;
attack_wind_up = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do weapon stuff

switch (state){
    case 'canbepickedup':
        //noone owns us
        owner = noone;
        //set depth
        depth = -(y-4);
        //set persistance
        persistent = false;
        //wait for pickup
        CanBePickedUp();
    break;
    case 'holstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth always behind player
        depth = owner.depth+1;
        //set persistance
        persistent = true;
        //follow player
        x = owner.x-2;
        y = owner.y-4;
        image_angle = 105;
    break;
    case 'unholstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth in front of player
        depth = owner.depth-1;
        //set persistance
        persistent = true;
        
        //if swaping weapon then drop it and immeadiately go back to canbepickupstate
        if(DropWeapon()){
            exit;
        }
        
        //get lmb input
        GetMainInput();
        
        //set image angle in direction of mouse when not attacking
        if (!instance_exists(obj_projectile_melee)){
            image_alpha = 1;
            if (attack_wind_up == true){
                image_angle = point_direction(x,y,obj_mouse.x,obj_mouse.y)+90;
                image_yscale = 1;
                //follow player
                x = owner.x+lengthdir_y(choose(6,7,8),attack_dir);
                y = owner.y-lengthdir_x(choose(6,7,8),attack_dir);
            } else {
                image_angle = point_direction(x,y,obj_mouse.x,obj_mouse.y);
                if (round(image_angle/180) == 1){image_yscale = -1;
                }else{image_yscale = 1;}
                //follow player
                x = owner.x;
                y = owner.y;
            }
        } else {
            image_alpha = 0;
            //follow player
            x = owner.x;
            y = owner.y;
        }
        
        //if clicking and ready to shoot
        if (main_keyp and last_cleave_timer &gt;= between_cleave_time and room != rm_upgrade and room != rm_champ_select and owner.state != stateUNIQUE and !parried){
            //start attack wind up
            attack_wind_up = true;
            //reset timer
            last_cleave_timer = 0;
            //attack_dir
            attack_dir = point_direction(x,y,obj_mouse.x,obj_mouse.y);
        }
        
        //if winding up about to attack
        if (attack_wind_up == true){
            if (instance_exists(owner)){
                //Viking berserker mode. Ax attack becomes instant.
                if (owner.berserk == true){
                    //speed up timer so it becomes instant
                    last_cleave_timer = between_cleave_time/2;
                    //end attack wind up
                    attack_wind_up = false;
                    //make strikebox
                    var projectile = instance_create(x+lengthdir_x(5,attack_dir),y+lengthdir_y(5,attack_dir),obj_projectile_melee);
                    projectile.creator = self.id;
                    //kick camera forward and shake
                    global.screenkick += 12;
                    //play sound
                    PlaySound(snd_weapon_ax01,1,choose(10,11),random_range(.95,1.1));
                } else {
                    if (last_cleave_timer == round(between_cleave_time*room_speed/2)/room_speed){
                        //end attack wind up
                        attack_wind_up = false;
                        //make strikebox
                        var projectile = instance_create(x+lengthdir_x(5,attack_dir),y+lengthdir_y(5,attack_dir),obj_projectile_melee);
                        projectile.creator = self.id;
                        //kick camera forward and shake
                        global.screenkick += 12;
                        //play sound
                        PlaySound(snd_weapon_ax01,1,choose(10,11),random_range(.95,1.1));
                    } 
                }
            }          
        }
        //increment timer
        last_cleave_timer += 1/room_speed;
    break;
}

if instance_exists(owner){
    //the current selected weapon    
    if (owner.weapon[owner.selected_weapon_index] == self.id){
        //set state
        state = 'unholstered';
        //not the selected weapon
    } else if (owner.weapon[owner.selected_weapon_index] != self.id and state != 'canbepickedup'){
            state = 'holstered';
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
