<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_hook</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_weapon_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init rifle
owner = noone;
state = 'canbepickedup';
between_shot_time = 2;//2 second between shots
last_shot_timer = 120/room_speed;
recoil = 0;
recoil_direction = 0;

globalvar already_hooked;
already_hooked = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do weapon stuff

switch (state){
    case 'canbepickedup':
        //noone owns us
        owner = noone;
        //set depth
        depth = -(y-4);
        //set persistance
        persistent = false;
        //wait for pickup
        CanBePickedUp();
    break;
    case 'holstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth always behind player
        depth = owner.depth+1;
        //set persistance
        persistent = true;
        //follow player
        x = owner.x-2;
        y = owner.y-4;
        image_angle = 105;
    break;
    case 'unholstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth in front of player
        depth = owner.depth-1;
        //set persistance
        persistent = true;
        
        //if swaping weapon then drop it and immeadiately go back to canbepickupstate
        if(DropWeapon()){
            exit;
        }
        
        //get rmb input
        GetMainInput();
        
        //set image angle in direction of mouse
        image_angle = point_direction(x,y,obj_mouse.x,obj_mouse.y);
        if (round(image_angle/180) == 1){image_yscale = -1;
        }else{image_yscale = 1;}
        
        if (recoil &gt; 0){
            //slowly return to player after getting recoil
            x = owner.x + lengthdir_x(recoil,recoil_direction);
            y = owner.y + lengthdir_y(recoil,recoil_direction);
            recoil -= .5;
        } else {
            if (instance_exists(obj_projectile_special)){
                hook_dir = point_direction(x,y,obj_projectile_special.x,obj_projectile_special.y);
                x = owner.x + lengthdir_x(16,hook_dir);
                y = owner.y + lengthdir_y(16,hook_dir);
            }else {
                //follow player
                x = owner.x;
                y = owner.y;
            }
        }
        
        //clicking and ready to shoot and correct room and not already hooked to an enemy
        if (main_keyp and last_shot_timer &gt;= between_shot_time and room != rm_upgrade and room != rm_champ_select and !already_hooked){
            //destroy hook projectile one is already attached to a wall
            if (instance_exists(obj_projectile_special) and instance_exists(owner)){
                with (obj_projectile_special){
                    if (hooked_wall){
                        instance_destroy();
                    }
                }
            }
            //reset timer
            last_shot_timer = 0;
            var projectile = instance_create(x+lengthdir_x(11,image_angle),y+lengthdir_y(11,image_angle),obj_projectile_special);
            projectile.creator = self.id;
            if (instance_exists(owner)){
                projectile.owner = owner;
            }
            //recoil gun
            recoil = 6;
            recoil_direction = image_angle + 180;
            
            //eject shell
            //CreateDebris(spr_gunslinger_main_bulletshell,true,irandom_range(10,15),image_angle+irandom_range(135,175),1,spr_bulletshell_shadow);
            //kick camera back and shake
            global.screenkick += -6;
            //play sound
            PlaySound(snd_weapon_sniper,1,choose(9,10,11),1.4);           
        }
        
        //increment timer
        last_shot_timer += 1/room_speed;
    break;
}

if instance_exists(owner){
    //the current selected weapon    
    if (owner.weapon[owner.selected_weapon_index] == self.id){
        //set state
        state = 'unholstered';
    //not the selected weapon
    } else if (owner.weapon[owner.selected_weapon_index] != self.id and state != 'canbepickedup'){
        //set state
        state = 'holstered';
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw line
event_inherited();
//draw rope coming from grapple hook
if (state == 'unholstered' and instance_exists(obj_projectile_special)){
    var atemp_dir = point_direction(x,y,obj_projectile_special.x,obj_projectile_special.y);
    var atemp_x = x + lengthdir_x(12,atemp_dir);
    var atemp_y = y + lengthdir_y(12,atemp_dir);
    var astart_x = atemp_x;
    var astart_y = atemp_y;
    var line_collision = (grid_place_meeting(atemp_x,atemp_y,0));// or position_meeting(temp_x,temp_y,obj_enemy_parent));
    while (!line_collision and point_distance(astart_x,astart_y,atemp_x,atemp_y) &lt; room_width){
        atemp_x += lengthdir_x(4,atemp_dir);
        atemp_y += lengthdir_y(4,atemp_dir);
        line_collision = (grid_place_meeting(atemp_x,atemp_y,0));// or position_meeting(temp_x,temp_y,obj_enemy_parent));
    }
    draw_set_blend_mode(bm_add);
    draw_set_alpha(.3);
    draw_line_width_colour(astart_x,astart_y,atemp_x,atemp_y,1,c_dkgray,c_gray);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
