<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_katana</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_weapon_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init katana
owner = noone;
state = 'canbepickedup';
between_slash_time = .4;//a third of a second between shots
last_slash_timer = 0;
recoil = 0;
recoil_direction = 0;
attack_dir = 0;
image_speed = 0;
weapon_angle = 0;
draw_sheath = false;//for drawing sheath when attacking
combo = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do weapon stuff

switch (state){
    case 'canbepickedup':
        //noone owns us
        owner = noone;
        //set depth
        depth = -(y-4);
        //set persistance
        persistent = false;
        //set image index to sheathed image
        image_index = 0;
        //wait for pickup
        CanBePickedUp();
    break;
    case 'holstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth always behind player
        depth = owner.depth+1;
        //set persistance
        persistent = true;
        //set image index to sheathed image
        image_index = 0;
        //follow player
        x = owner.x-2;
        y = owner.y-4;
        image_angle = 105;
    break;
    case 'unholstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth in front of player
        depth = owner.depth-1;
        //set persistance
        persistent = true;
        
        //if swaping weapon then drop it and immeadiately go back to canbepickupstate
        if(DropWeapon()){
            exit;
        }
        
        //get lmb input
        GetMainInput();
        
        //set image angle in direction of mouse when not attacking
        if (!instance_exists(obj_projectile_melee)){
            //set if drawing the sheath (no)
            draw_sheath = false;
            //set image index to sheathed image
            image_index = 0;
            image_alpha = 1;
            image_xscale = 1;
            image_angle = point_direction(x,y,obj_mouse.x,obj_mouse.y)+10;
            if (round(image_angle/180) == 1){image_yscale = -1;
            }else{image_yscale = 1;}
            //follow player
            x = owner.x;
            y = owner.y;
        } else { 
            //set if drawing the sheath (yes)
            draw_sheath = true;
            //set image index to unsheathed image
            image_index = 1;
            image_alpha = 0;
            image_xscale = -1;
            image_angle = attack_dir;
            if (round(image_angle/180) == 1){image_yscale = -1*combo;
            }else{image_yscale = 1*combo;}
            var xpos,ypos;
            switch(round(attack_dir/90)){
                case 0:
                case 4:
                    xpos = 0;
                    ypos = -13*combo;
                break;
                case 1:
                    xpos = -12*combo;
                    ypos = 0;
                break;
                case 2:
                    xpos = 0;
                    ypos = 13*combo;
                break;
                case 3:
                    xpos = 12*combo;
                    ypos = 0;
                break;
            }
                
            //follow player
            x = owner.x-lengthdir_x(4,attack_dir)+xpos;
            y = owner.y-lengthdir_y(4,attack_dir)+ypos;
        }
        
        //if clicking and ready to shoot
        if (main_keyp and last_slash_timer &gt;= between_slash_time and room != rm_upgrade and room != rm_champ_select and owner.state != stateSPECIAL and owner.state != stateUNIQUE and !parried){
            //reset timer
            last_slash_timer = 0;
            //determine slash dir
            if (combo == 1){
                combo = -1;
            }else {
                combo = 1;
            }
            //attack_dir
            attack_dir = point_direction(x,y,obj_mouse.x,obj_mouse.y);
            //make strikebox
            var projectile = instance_create(x+lengthdir_x(2,attack_dir),y+lengthdir_y(2,attack_dir),obj_projectile_melee);
            projectile.creator = self.id;
            //kick camera forward and shake
            global.screenkick += 10;
            //set sound based on combo
            var snd = snd_weapon_katana1;
            //play sound
            if (combo == -1){snd = snd_weapon_katana2;}
            PlaySound(snd,.6,choose(10,11),random_range(.9,1.2));           
        }
        //increment timer
        last_slash_timer += 1/room_speed;
    break;
}

if instance_exists(owner){
    //the current selected weapon    
    if (owner.weapon[owner.selected_weapon_index] == self.id){
        //set state
        state = 'unholstered';
        //not the selected weapon
    } else if (owner.weapon[owner.selected_weapon_index] != self.id and state != 'canbepickedup'){
        state = 'holstered';
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw self and scabbard
if (draw_sheath and instance_exists(owner)){
    sheath_angle = point_direction(owner.x,owner.y,obj_mouse.x,obj_mouse.y)+10;
    draw_sprite_ext(spr_weapon_katana,4,owner.x,owner.y,1,1,sheath_angle,c_white,1);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
