<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_weapon_revolver</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_weapon_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init revolver
owner = noone;
state = 'canbepickedup';
if (instance_exists(obj_gunslinger)){
    between_shot_time = .15;//a ninth of a second between shots
} else {
    between_shot_time = .3;//a third of a second between shots
}
last_shot_timer = 0;
recoil = 0;
recoil_direction = 0;
attack_dir = 0;
quickdraw = false;
bullet_type = obj_projectile_bullet;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do weapon stuff

switch (state){
    case 'canbepickedup':
        //noone owns us
        owner = noone;
        //set depth
        depth = -(y-4);
        //set persistance
        persistent = false;
        //wait for pickup
        CanBePickedUp();
    break;
    case 'holstered':
        //remember who owns us
        owner = obj_player.id;

        //set depth always behind player
        depth = owner.depth-1;
        //set persistance
        persistent = true;
        //follow player
        x = owner.x;
        y = owner.y+5;
        image_angle = 275;
    break;
    case 'unholstered':
        //remember who owns us
        owner = obj_player.id;
        //set depth in front of player
        depth = owner.depth-1;
        //set persistance
        persistent = true;
        
        //if swaping weapon then drop it and immeadiately go back to canbepickupstate
        if(DropWeapon()){
            exit;
        }
        
        //get rmb input
        GetMainInput();
        
        //set image angle in direction of mouse
        if (room != rm_upgrade and room != rm_champ_select){
            if (instance_exists(obj_player)){
                if (instance_exists(obj_gunslinger)){
                    if (quickdraw){
                        image_angle = attack_dir;
                        if (!instance_exists(bullet_type)){
                            if (round(attack_dir/180) == 1){
                                image_angle += 10;
                            } else {
                                image_angle -= 10;
                            }
                            recoil = 4;
                            recoil_direction = 100;
                            quickdraw = false;
                        }
                    } else {
                        if (round(point_direction(x,y,obj_mouse.x,obj_mouse.y)/180) == 1){
                            image_angle = 260;
                        }else {
                            image_angle = 280;
                        }    
                    }
                } else {
                    image_angle = point_direction(x,y,obj_mouse.x,obj_mouse.y);
                }
            }
        }
        if (round(image_angle/180) == 1){
            image_yscale = -1;
        }else{
            image_yscale = 1;
        }
        
        if (recoil &gt; 0){
            //slowly return to player after getting recoil
            x = owner.x + lengthdir_x(recoil,recoil_direction);
            y = owner.y + lengthdir_y(recoil,recoil_direction);
            recoil -= .5;
        } else {
            //follow player
            x = owner.x;
            y = owner.y;
        }
        
        //if clicking and ready to shoot
        if (main_keyp and last_shot_timer &gt;= between_shot_time and room != rm_upgrade and room != rm_champ_select){
            //reset timer
            last_shot_timer = 0;
            //set the attacking direction
            attack_dir = point_direction(x,y,obj_mouse.x,obj_mouse.y);
            //make bullet
            var projectile = instance_create(x+lengthdir_x(6,attack_dir),y+lengthdir_y(6,attack_dir),bullet_type);
            projectile.creator = self.id;
            //set quick draw time
            quickdraw = true;
            //recoil gun
            recoil = 4;
            recoil_direction = attack_dir + 180;
            //recoil
            x = owner.x + lengthdir_x(recoil,recoil_direction);
            y = owner.y + lengthdir_y(recoil,recoil_direction);
            //eject shell
            CreateDebris(spr_gunslinger_main_bulletshell,false,irandom_range(4,7),image_angle+irandom_range(135,175),1);
            if (time_stop or time_slow){
                //kick camera back and shake very little during time freezes
                global.screenkick += -2;
            }else {
                //kick camera back and shake
                global.screenkick += -6;
            }
            //play sound
            PlaySound(choose(snd_weapon_revolver01,snd_weapon_revolver02),.5,choose(9,10,11),1.4);           
        }
        //increment timer
        last_shot_timer += 1/room_speed;
    break;
}

if instance_exists(owner){
    //the current selected weapon    
    if (owner.weapon[owner.selected_weapon_index] == self.id){
        //set state
        state = 'unholstered';
        //not the selected weapon
    } else if (owner.weapon[owner.selected_weapon_index] != self.id and state != 'canbepickedup'){
            state = 'holstered';
    }        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
