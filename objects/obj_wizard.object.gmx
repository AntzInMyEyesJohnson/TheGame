<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wizard_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player</parentName>
  <maskName>spr_wizard_idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init player
InitializePlayer();
InitializeScreenFreezeVariables();
InitializeTimers();
animate_idle = spr_wizard_idle;
animate_move = spr_wizard_move;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(hitby_list,ds_type_list){
    ds_list_destroy(hitby_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player step
//get depth
depth = -(y+4);
//give starting weapon
if (given_starting_weapon == true){
    weapon[selected_weapon_index] = starting_weapon.id;
    weapon_count++;
    starting_weapon.state = 'unholstered';
    given_starting_weapon = false;
}
if (ScreenFreezeCheck()){exit;}

//for when the player is using the grapple weapon
if (GrappleCheck()){
    //propels player towards the hook projectile embedded in the wall
    hspd = lengthdir_x(grap_spd,grap_dir);
    vspd = lengthdir_y(grap_spd,grap_dir);
    PlayerCollisionWithWallGrid();
    exit;
}

switch(state){
    case stateFREE:
        GetMovementInput();
        GetAbilityInput();
        WizardAbility();
        PlayerMovement();
        PlayerSwapSecondary();
    break;
    case stateHIT:
        PlayerHitState();
    break;
    case stateDEATH:
        PlayerDeathState(spr_wizard_death);
    break;
}
//Increment 'last' timers
IncrementTimers();

//facing
if (hspd != 0){
    image_xscale = sign(hspd);
} 

image_xscale = sign(image_xscale)*scale_factor;
image_yscale = sign(image_yscale)*scale_factor;

if (PlayerHitByProjectile()){
    if (state != stateDEATH){
        if (ds_list_find_index(hitby_list,incoming_enemy_projectile) == -1){
            ds_list_add(hitby_list,incoming_enemy_projectile);
            hitby_list_timer = room_speed*10;
            //knockback
            hspd = incoming_enemy_projectile.hspd;
            vspd = incoming_enemy_projectile.vspd;
            
            //play player hit sound
            PlaySound(snd_hit3,1,15,random_range(1,1.1));
            
            //subtract damage from health only if projectile not in ds list (so only once per projectile)
            player_health -= incoming_enemy_projectile.damage;      
            if (player_health &lt;= 0){
                state = stateDEATH;
            } else {
                hit_timer = 0;
                state = stateHIT;
            }
        }
    }
}

PlayerCollisionWithWallGrid();

HitbyListManagement();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy list
if ds_exists(hitby_list,ds_type_list){
    ds_list_destroy(hitby_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
